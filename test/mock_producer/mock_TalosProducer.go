// Code generated by MockGen. DO NOT EDIT.
// Source: TalosProducer.go

// Package mock_producer is a generated GoMock package.
package mock_producer

import (
	reflect "reflect"

	message "talos-sdk-golang/thrift/message"

	gomock "github.com/golang/mock/gomock"
)

// MockProducer is a mock of Producer interface
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// AddUserMessage mocks base method
func (m *MockProducer) AddUserMessage(msgList []*message.Message) error {
	ret := m.ctrl.Call(m, "AddUserMessage", msgList)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserMessage indicates an expected call of AddUserMessage
func (mr *MockProducerMockRecorder) AddUserMessage(msgList interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserMessage", reflect.TypeOf((*MockProducer)(nil).AddUserMessage), msgList)
}

// DoAddUserMessage mocks base method
func (m *MockProducer) DoAddUserMessage(msgList []*message.Message) error {
	ret := m.ctrl.Call(m, "DoAddUserMessage", msgList)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoAddUserMessage indicates an expected call of DoAddUserMessage
func (mr *MockProducerMockRecorder) DoAddUserMessage(msgList interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAddUserMessage", reflect.TypeOf((*MockProducer)(nil).DoAddUserMessage), msgList)
}

// IsActive mocks base method
func (m *MockProducer) IsActive() bool {
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive
func (mr *MockProducerMockRecorder) IsActive() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockProducer)(nil).IsActive))
}

// IsDisable mocks base method
func (m *MockProducer) IsDisable() bool {
	ret := m.ctrl.Call(m, "IsDisable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDisable indicates an expected call of IsDisable
func (mr *MockProducerMockRecorder) IsDisable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDisable", reflect.TypeOf((*MockProducer)(nil).IsDisable))
}

// IsShutdown mocks base method
func (m *MockProducer) IsShutdown() bool {
	ret := m.ctrl.Call(m, "IsShutdown")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsShutdown indicates an expected call of IsShutdown
func (mr *MockProducerMockRecorder) IsShutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsShutdown", reflect.TypeOf((*MockProducer)(nil).IsShutdown))
}

// IncreaseBufferedCount mocks base method
func (m *MockProducer) IncreaseBufferedCount(incrementNumber, incrementBytes int64) {
	m.ctrl.Call(m, "IncreaseBufferedCount", incrementNumber, incrementBytes)
}

// IncreaseBufferedCount indicates an expected call of IncreaseBufferedCount
func (mr *MockProducerMockRecorder) IncreaseBufferedCount(incrementNumber, incrementBytes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseBufferedCount", reflect.TypeOf((*MockProducer)(nil).IncreaseBufferedCount), incrementNumber, incrementBytes)
}

// DecreaseBufferedCount mocks base method
func (m *MockProducer) DecreaseBufferedCount(decrementNumber, decrementBytes int64) {
	m.ctrl.Call(m, "DecreaseBufferedCount", decrementNumber, decrementBytes)
}

// DecreaseBufferedCount indicates an expected call of DecreaseBufferedCount
func (mr *MockProducerMockRecorder) DecreaseBufferedCount(decrementNumber, decrementBytes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseBufferedCount", reflect.TypeOf((*MockProducer)(nil).DecreaseBufferedCount), decrementNumber, decrementBytes)
}

// CheckPartitionTask mocks base method
func (m *MockProducer) CheckPartitionTask() {
	m.ctrl.Call(m, "CheckPartitionTask")
}

// CheckPartitionTask indicates an expected call of CheckPartitionTask
func (mr *MockProducerMockRecorder) CheckPartitionTask() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPartitionTask", reflect.TypeOf((*MockProducer)(nil).CheckPartitionTask))
}
